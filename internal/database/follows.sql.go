// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: follows.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH inserted AS (
INSERT INTO feed_follows (id, created_at, updated_at, user_id, feed_id)
        VALUES ($1, $2, $3, $4, $5)
    RETURNING
        id, created_at, updated_at, user_id, feed_id)
    SELECT
        inserted.id, inserted.created_at, inserted.updated_at, inserted.user_id, inserted.feed_id,
        f.name AS feed_name,
        u.name AS user_name
    FROM
        inserted
        INNER JOIN feeds f ON f.id = inserted.feed_id
        INNER JOIN users u ON u.id = inserted.user_id
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
	FeedName  string
	UserName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.FeedName,
		&i.UserName,
	)
	return i, err
}

const deleteFeedFollow = `-- name: DeleteFeedFollow :exec
Delete from feed_follows
where user_id = $1 and feed_id = $2
`

type DeleteFeedFollowParams struct {
	UserID uuid.UUID
	FeedID uuid.UUID
}

func (q *Queries) DeleteFeedFollow(ctx context.Context, arg DeleteFeedFollowParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollow, arg.UserID, arg.FeedID)
	return err
}

const getFeedFollowForUser = `-- name: GetFeedFollowForUser :many
SELECT
    f.name AS feed_name,
    u.name AS useer_name
FROM
    feed_follows o
    LEFT JOIN users u ON o.user_id = u.id
    LEFT JOIN feeds f ON o.feed_id = f.id
WHERE
    u.id = $1
`

type GetFeedFollowForUserRow struct {
	FeedName  sql.NullString
	UseerName sql.NullString
}

func (q *Queries) GetFeedFollowForUser(ctx context.Context, id uuid.UUID) ([]GetFeedFollowForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowForUser, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowForUserRow
	for rows.Next() {
		var i GetFeedFollowForUserRow
		if err := rows.Scan(&i.FeedName, &i.UseerName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
